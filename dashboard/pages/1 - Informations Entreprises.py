import streamlit as st
import pandas as pd

st.set_page_config(page_title="AperÃ§u des Ã©tablissements franÃ§ais", page_icon="ðŸ“ˆ")

# Charger les donnÃ©es JSON dans un DataFrame
file_path = "./../Data/base-etablissement.json"
df = pd.read_json(file_path)

# Normalisation de la structure JSON (si nÃ©cessaire)
# Si vos donnÃ©es JSON ont des colonnes imbriquÃ©es, utilisez json_normalize pour les aplatir.
df = pd.json_normalize(df.to_dict(orient='records'))

# VÃ©rifier que les colonnes nÃ©cessaires sont prÃ©sentes
required_columns = ["coordinates.deptname", "coordinates.deptcode", "capacity", "title", "noFinesset"]
if not all(col in df.columns for col in required_columns):
    raise ValueError("Le fichier JSON ne contient pas toutes les colonnes nÃ©cessaires : " + ", ".join(required_columns))

# SÃ©lection des filtres dans Streamlit
departements = df["coordinates.deptname"].dropna().unique().tolist()
capacite_min = st.sidebar.number_input("CapacitÃ© minimale d'accueil", min_value=0, value=0)
capacite_max = st.sidebar.number_input("CapacitÃ© maximale d'accueil", min_value=0, value=1000)
selected_departement = st.sidebar.selectbox("Choisissez un dÃ©partement", options=departements)

# Application des filtres sur le DataFrame
filtered_df = df[
    (df["coordinates.deptname"] == selected_departement) &
    (df["capacity"] >= capacite_min) &
    (df["capacity"] <= capacite_max)
]

# Regrouper les donnÃ©es et calculer le nombre total de places par sociÃ©tÃ©
grouped_df = (filtered_df
    .groupby(["title", "noFinesset", "coordinates.deptname", "coordinates.deptcode"], as_index=False)
    .agg({"capacity": "sum"})
    .rename(columns={
        "title": "SociÃ©tÃ©", 
        "noFinesset": "noFinesset", 
        "coordinates.deptname": "nom_departement", 
        "coordinates.deptcode": "no_departement", 
        "capacity": "Nombre de Place"
    })
)

# Ajouter une colonne 'Afficher' pour afficher le nom de la sociÃ©tÃ© et la capacitÃ© d'accueil
grouped_df['Afficher'] = grouped_df['SociÃ©tÃ©'] + " - CapacitÃ©: " + grouped_df['Nombre de Place'].astype(str)
grouped_df['departement'] = grouped_df['no_departement'] + ' - ' + grouped_df['nom_departement'].astype(str)


if not grouped_df.empty:
    # Affichage du tableau dans la sidebar
    st.sidebar.write("### Liste des sociÃ©tÃ©s")
    st.sidebar.table(grouped_df[['SociÃ©tÃ©', 'Nombre de Place']])

    # SÃ©lectionner une sociÃ©tÃ©
    selected_sociÃ©tÃ© = st.selectbox("Choisissez une sociÃ©tÃ©", grouped_df["SociÃ©tÃ©"].tolist())

    # Recherche des dÃ©tails pour la sociÃ©tÃ© sÃ©lectionnÃ©e
    if selected_sociÃ©tÃ©:
        sociÃ©tÃ©_details = filtered_df[filtered_df["title"] == selected_sociÃ©tÃ©]

        # Extraire les dÃ©tails pertinents
        if not sociÃ©tÃ©_details.empty:
            # Extraction des informations
            titre = sociÃ©tÃ©_details.get("title")
            statut = sociÃ©tÃ©_details.get("legal_status")
            capacitÃ© = sociÃ©tÃ©_details.get("capacity")
            types = sociÃ©tÃ©_details.get("types", {})
            departement = sociÃ©tÃ©_details.get("coordinates", {}).get("deptname")
            adresse = sociÃ©tÃ©_details.get("coordinates", {}).get("street")
            ville = sociÃ©tÃ©_details.get("coordinates", {}).get("city")
            tÃ©lÃ©phone = sociÃ©tÃ©_details.get("coordinates", {}).get("phone")
            email = sociÃ©tÃ©_details.get("coordinates", {}).get("emailContact")
            gestionnaire = sociÃ©tÃ©_details.get("coordinates", {}).get("gestionnaire") 
            latitude = sociÃ©tÃ©_details.get("coordinates", {}).get("latitude")
            longitude = sociÃ©tÃ©_details.get("coordinates", {}).get("longitude")

            # Affichage des informations dÃ©taillÃ©es
            st.write(f"### DÃ©tails de la sociÃ©tÃ© : {titre}")
            st.write(f"**Statut LÃ©gal** : {statut}")
            st.write(f"**CapacitÃ© d'accueil** : {capacitÃ©}")
            st.write(f"**Type de structure** : {', '.join([k for k, v in types.items() if v])}")
            st.write(f"**DÃ©partement** : {departement}")
            st.write(f"**Adresse** : {adresse}")
            st.write(f"**Ville** : {ville}")
            st.write(f"**TÃ©lÃ©phone** : {tÃ©lÃ©phone}")
            st.write(f"**Email** : {email}")
            st.write(f"**Gestionnaire** : {gestionnaire}")
            st.write(f"**Latitude / Longitude** : ({latitude}, {longitude})")

        else:
            st.write("DÃ©tails non disponibles pour cette sociÃ©tÃ©.")
else:
    st.write("Aucune sociÃ©tÃ© ne correspond Ã  votre recherche.")

